<?php

/**
 * @file
 * Install, uninstall and update hooks for Bootstrap Pages module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Component\Utility\NestedArray;
use Symfony\Component\Yaml\Yaml;

/**
 * Reads in new configuration.
 *
 * @param string $config_name
 *   Configuration name.
 * @param string $bp_path
 *   Base path.
 */
function bootstrap_pages_read_in_new_config($config_name, $bp_path) {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');
  $active_storage->write($config_name, Yaml::parse(file_get_contents($bp_path . '/config/install/' . $config_name . '.yml')));
}

/**
 * Updates a configuration from yml file.
 *
 * @param string $ymlFileName
 *   Yml file name (without .yml suffix).
 * @param array $sets
 *   An array of what needs to be set.
 *   - The key will be what we are setting (Can have . in string for array).
 *   - The value is the key that will be used from the new config file (Can have
 *     . in string for array).
 *
 *   For example if you are updating 'content' with 'content' from the new
 *   config file, $sets would be ['content' => 'content'].
 */
function bootstrap_pages_update_configuration_from_yml($ymlFileName, array $sets) {
  $bp_path = drupal_get_path('module', 'bootstrap_pages');
  $yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/' . $ymlFileName . '.yml'));
  $config = \Drupal::configFactory()->getEditable($ymlFileName);
  foreach ($sets as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $config->set($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      $config->set($key, $value);
    }
  }
  $config->save(TRUE);
}

/**
 * Update entity from yml.
 *
 * Some config like form display needs to be updated via config manager.
 *
 * @param string $ymlFileName
 *   Yml file name.
 * @param string $entityType
 *   The entity type for this storage.
 * @param mixed $id
 *   The ID of the entity to load.
 * @param array $setComponents
 *   Array of components you want to add.
 *   - The key will be what we are setting.
 *   - The value is the key that will be used from the new config file (Can have
 *     . in string for array).
 */
function bootstrap_pages_update_entity_from_yml($ymlFileName, $entityType, $id, array $setComponents) {
  $bp_path = drupal_get_path('module', 'bootstrap_pages');
  $yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/' . $ymlFileName . '.yml'));

  $entity = \Drupal::entityTypeManager()
    ->getStorage($entityType)
    ->load($id);
  foreach ($setComponents as $key => $value) {
    $parts = explode('.', $value);
    if (count($parts) == 1) {
      $entity->setComponent($key, $yml[$value]);
    }
    else {
      $value = NestedArray::getValue($yml, $parts);
      $entity->setComponent($key, $value);
    }
  }

  $entity->save();
}

/**
 * Adds Email and Job Title fields to the Author Content type.
 */
function bootstrap_pages_update_8201() {
  // Sets variable for the path.
  $bp_path = drupal_get_path('module', 'bootstrap_pages');

  // Create field storage.
  $bpg_email_storage_yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/field.storage.node.bpg_email.yml'));
  if (!FieldStorageConfig::loadByName($bpg_email_storage_yml['entity_type'], $bpg_email_storage_yml['field_name'])) {
    FieldStorageConfig::create($bpg_email_storage_yml)->save();
  }
  // Create field instance.
  $bpg_email_yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/field.field.node.bpg_author.bpg_email.yml'));
  if (!FieldConfig::loadByName($bpg_email_yml['entity_type'], $bpg_email_yml['bundle'], $bpg_email_yml['field_name'])) {
    FieldConfig::create($bpg_email_yml)->save();
  }

  // Create field storage.
  $bpg_title_storage_yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/field.storage.node.bpg_title.yml'));
  if (!FieldStorageConfig::loadByName($bpg_title_storage_yml['entity_type'], $bpg_title_storage_yml['field_name'])) {
    FieldStorageConfig::create($bpg_title_storage_yml)->save();
  }
  // Create field instance.
  $bpg_title_yml = Yaml::parse(file_get_contents($bp_path . '/config/optional/field.field.node.bpg_author.bpg_title.yml'));
  if (!FieldConfig::loadByName($bpg_title_yml['entity_type'], $bpg_title_yml['bundle'], $bpg_title_yml['field_name'])) {
    FieldConfig::create($bpg_title_yml)->save();
  }

  // Updates Author form display.
  bootstrap_pages_update_entity_from_yml('core.entity_form_display.node.bpg_author.default', 'entity_form_display', 'node.bpg_author.default', [
    'title' => 'content.title',
    'bpg_title' => 'content.bpg_title',
    'bpg_email' => 'content.bpg_email',
    'bpg_body' => 'content.bpg_body',
    'bpg_author_image' => 'content.bpg_author_image',
    'bpg_profile_drupal' => 'content.bpg_profile_drupal',
    'bpg_profile_facebook' => 'content.bpg_profile_facebook',
    'bpg_profile_github' => 'content.bpg_profile_github',
    'bpg_profile_google_plus' => 'content.bpg_profile_google_plus',
    'bpg_profile_instagram' => 'content.bpg_profile_instagram',
    'bpg_profile_linkedin' => 'content.bpg_profile_linkedin',
    'bpg_profile_pinterest' => 'content.bpg_profile_pinterest',
    'bpg_twitter_account' => 'content.bpg_twitter_account',
    'bpg_twitter_account_id' => 'content.bpg_twitter_account_id',
    'bpg_profile_youtube' => 'content.bpg_profile_youtube',
    'bpg_website' => 'content.bpg_website',
  ]);

  // Updates Default Author View display config.
  bootstrap_pages_update_entity_from_yml('core.entity_view_display.node.bpg_author.default', 'entity_view_display', 'node.bpg_author.default', [
    'bpg_title' => 'content.bpg_title',
    'bpg_email' => 'content.bpg_email',
    'bpg_body' => 'content.bpg_body',
    'bpg_author_image' => 'content.bpg_author_image',
    'bpg_profile_drupal' => 'content.bpg_profile_drupal',
    'bpg_profile_facebook' => 'content.bpg_profile_facebook',
    'bpg_profile_github' => 'content.bpg_profile_github',
    'bpg_profile_google_plus' => 'content.bpg_profile_google_plus',
    'bpg_profile_instagram' => 'content.bpg_profile_instagram',
    'bpg_profile_linkedin' => 'content.bpg_profile_linkedin',
    'bpg_profile_pinterest' => 'content.bpg_profile_pinterest',
    'bpg_twitter_account' => 'content.bpg_twitter_account',
    'bpg_twitter_account_id' => 'content.bpg_twitter_account_id',
    'bpg_profile_youtube' => 'content.bpg_profile_youtube',
    'bpg_website' => 'content.bpg_website',
  ]);

  // Send message to updater.
  $message = t('Adds Email and Job Title fields to the Author Content type.');
  return $message;
}
